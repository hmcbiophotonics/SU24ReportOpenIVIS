[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quarto-Report-OpenIVIS",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Quarto Report OpenIVIS</span>"
    ]
  },
  {
    "objectID": "index.html#file-structure",
    "href": "index.html#file-structure",
    "title": "Quarto-Report-OpenIVIS",
    "section": "File Structure",
    "text": "File Structure\nThe suggested structure for this repository is designed to maintain clarity and keep related files together.\n.\n├── _book\n├── _environment.yml\n├── _quarto.yml\n├── _site\n├── ieee.csl\n├── index.qmd\n├── references.bib\n├── sections\n│   ├── abstract\n│   │   └── abstract.qmd\n│   ├── acknowledgements\n│   │   └── acknowledgements.qmd\n│   ├── conclusion\n│   │   └── conclusion.qmd\n│   ├── introduction\n│   │   ├── images\n│   │   └── introduction.qmd\n│   ├── references\n│   └── results\n│       ├── data\n│       │   └── test_data.mat\n│       ├── images\n│       │   └── test_data_plot.png\n│       └── results.qmd\n└── styles.css",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Quarto Report OpenIVIS</span>"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Quarto-Report-OpenIVIS",
    "section": "",
    "text": "project: type: book book: title: “Quarto Report OpenIVIS” author: - name: Ruby Peterman and Hailey Knolton email: rpeterman@g.hmc.edu , hknolton@g.hmc.edu\ndate: 2024-07-19 chapters: - index.qmd - sections/abstract/abstract.qmd - sections/introduction/introduction.qmd - sections/results/results.qmd - sections/conclusion/conclusion.qmd - sections/acknowledgements/acknowledgements.qmd\nformat: html: theme: cosmo css: styles.css toc: true pdf: default\nbibliography: references.bib csl: ieee.csl",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>intro.html</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "3  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "Sections/Results/results.html",
    "href": "Sections/Results/results.html",
    "title": "4  Results",
    "section": "",
    "text": "4.1 Demonstration",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "Sections/Results/results.html#demonstration",
    "href": "Sections/Results/results.html#demonstration",
    "title": "4  Results",
    "section": "",
    "text": "4.1.1 Create sample dataset\nFor example, let’s consider a toy example. First, we’ll create and save a data set. In your case, you’ll likely skip this step since you’ll likely have a dataset from elsewhere to use.\nFirst, let’s create a Python code block to create some random data.\n\nimport numpy as np\n\nN = 100 # Set number of data points\n\nx = np.linspace(0, 10, N) # Create x vector\ny = 5*x + np.random.rand(N)      # Generate linear data with simulated noise\n\nNext, let’s save this data in our /data/ subfolder. You can choose various formats, but one convenient option is to save the data in a .mat file. This way it can be opened and processed in Matlab as well as Python. It also allows you to nicely structure the data and will make the loading and plotting code we develop Matlab compatible.\n\nimport scipy.io as sio  # Load Scipy IO module which has the function to save and load .mat files\n\ndata_to_save = {'x': x, 'y': y} # Create dictionary to story the data\nsio.savemat('data/test_data.mat', data_to_save)  # Save the data to a .mat file\n\n\n\n4.1.2 Load and Plot Data\nFirst let’s load the data from the .mat file.\n\ndata_load = sio.loadmat('data/test_data.mat')\n\nThen, let’s plot it.\n\n\n\n\n\n\nWarning\n\n\n\nNote carefully that because of how savemat() works, we need to index into the zeroth element of the dictionary values in order to get to the data we want.\n\n\n\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\nax.plot(data_load['x'][0],data_load['y'][0]) # Note that we are using the loaded data here and watch out for indexing.\nax.set_xlabel('x [units]')\nax.set_ylabel('y [units]')\nax.set_title('Plot of Random Data')\n\nText(0.5, 1.0, 'Plot of Random Data')\n\n\n\n\n\n\n\n\n\n\n\n4.1.3 Save and Plot Images of Figures\nWe can even go ahead and save the plots as images if we want to have the flexiblity to include them elsewhere.\n\nfig.savefig('images/test_data_plot.png', dpi=300)\n\nThen we can directly display as a Quarto figure as usual.\n\n\n\n\n\n\nFigure 4.1: Displaying image of plotted random example data.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results</span>"
    ]
  }
]