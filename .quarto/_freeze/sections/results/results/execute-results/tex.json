{
  "hash": "e140e5ddce6bd4733bb814bdb818d6a1",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Results\noutput: index\njupyter: python3\n---\n\n\n\n\n\n\n## 3.1 System Verification and Setup\n\n## 3.2 Flourescence Imaging\n\n## 3.3 Laser Speckle Contrast Imaging\n\n\n\nThe advantage to using Quarto as compared to another method of documenting your work is that you can include executable Python code inline with your project.\nThis means that you can provide your data and have your figures re-render without needing to execute separately and then include them into the project.\n\n## Demonstration\n### Create sample dataset\nFor example, let's consider a toy example.\nFirst, we'll create and save a data set.\nIn your case, you'll likely skip this step since you'll likely have a dataset from elsewhere to use.\n\nFirst, let's create a Python code block to create some random data.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n\nN = 100 # Set number of data points\n\nx = np.linspace(0, 10, N) # Create x vector\ny = 5*x + np.random.rand(N)      # Generate linear data with simulated noise\n```\n:::\n\n\nNext, let's save this data in our `/data/` subfolder.\nYou can choose various formats, but one convenient option is to save the data in a `.mat` file.\nThis way it can be opened and processed in Matlab as well as Python.\nIt also allows you to nicely structure the data and will make the loading and plotting code we develop Matlab compatible.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport scipy.io as sio  # Load Scipy IO module which has the function to save and load .mat files\n\ndata_to_save = {'x': x, 'y': y} # Create dictionary to story the data\nsio.savemat('data/test_data.mat', data_to_save)  # Save the data to a .mat file\n```\n:::\n\n\n### Load and Plot Data\n\nFirst let's load the data from the `.mat` file.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndata_load = sio.loadmat('data/test_data.mat')\n```\n:::\n\n\nThen, let's plot it.\n\n::: {.callout-warning}\nNote carefully that because of how `savemat()` works, we need to index into the **zeroth element** of the dictionary values in order to get to the data we want.\n:::\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\nax.plot(data_load['x'][0],data_load['y'][0]) # Note that we are using the loaded data here and watch out for indexing.\nax.set_xlabel('x [units]')\nax.set_ylabel('y [units]')\nax.set_title('Plot of Random Data')\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nText(0.5, 1.0, 'Plot of Random Data')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](results_files/figure-pdf/cell-5-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n### Save and Plot Images of Figures\nWe can even go ahead and save the plots as images if we want to have the flexiblity to include them elsewhere.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nfig.savefig('images/test_data_plot.png', dpi=300)\n```\n:::\n\n\nThen we can directly display as a Quarto figure as usual.\n\n::: {#fig-test-data}\n![](./images/test_data_plot.png)\n\nDisplaying image of plotted random example data.\n:::\n\n",
    "supporting": [
      "results_files/figure-pdf"
    ],
    "filters": []
  }
}