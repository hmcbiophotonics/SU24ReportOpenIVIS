---
title: Results
output: index
jupyter: python3
---

### 3.1 System Verification and Setup

### 3.2 Flourescence Imaging

### 3.3 Laser Speckle Contrast Imaging



The advantage to using Quarto as compared to another method of documenting your work is that you can include executable Python code inline with your project.
This means that you can provide your data and have your figures re-render without needing to execute separately and then include them into the project.

## Demonstration
### Create sample dataset
For example, let's consider a toy example.
First, we'll create and save a data set.
In your case, you'll likely skip this step since you'll likely have a dataset from elsewhere to use.

First, let's create a Python code block to create some random data.

```{python}
import numpy as np

N = 100 # Set number of data points

x = np.linspace(0, 10, N) # Create x vector
y = 5*x + np.random.rand(N)      # Generate linear data with simulated noise
```

Next, let's save this data in our `/data/` subfolder.
You can choose various formats, but one convenient option is to save the data in a `.mat` file.
This way it can be opened and processed in Matlab as well as Python.
It also allows you to nicely structure the data and will make the loading and plotting code we develop Matlab compatible.

```{python}

import scipy.io as sio  # Load Scipy IO module which has the function to save and load .mat files

data_to_save = {'x': x, 'y': y} # Create dictionary to story the data
sio.savemat('data/test_data.mat', data_to_save)  # Save the data to a .mat file
```

### Load and Plot Data

First let's load the data from the `.mat` file.

```{python}

data_load = sio.loadmat('data/test_data.mat')
```

Then, let's plot it.

::: {.callout-warning}
Note carefully that because of how `savemat()` works, we need to index into the **zeroth element** of the dictionary values in order to get to the data we want.
:::
```{python}
import matplotlib.pyplot as plt

fig, ax = plt.subplots()

ax.plot(data_load['x'][0],data_load['y'][0]) # Note that we are using the loaded data here and watch out for indexing.
ax.set_xlabel('x [units]')
ax.set_ylabel('y [units]')
ax.set_title('Plot of Random Data')
```


### Save and Plot Images of Figures
We can even go ahead and save the plots as images if we want to have the flexiblity to include them elsewhere.

```{python}
fig.savefig('images/test_data_plot.png', dpi=300)
```

Then we can directly display as a Quarto figure as usual.

::: {#fig-test-data}
![](./images/test_data_plot.png)

Displaying image of plotted random example data.
:::